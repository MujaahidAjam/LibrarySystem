// <auto-generated />
using System;
using LibrarySystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibrarySystem.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookLibrarian", b =>
                {
                    b.Property<int>("ManagedBooksId")
                        .HasColumnType("int");

                    b.Property<int>("ManagersLibrarianId")
                        .HasColumnType("int");

                    b.HasKey("ManagedBooksId", "ManagersLibrarianId");

                    b.HasIndex("ManagersLibrarianId");

                    b.ToTable("BookLibrarian");
                });

            modelBuilder.Entity("LibrarySystem.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = 2,
                            Name = "George Orwell"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            IsAvailable = true,
                            Title = "Harry Potter"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            IsAvailable = true,
                            Title = "1984"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Models.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("Checkouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            CheckoutDate = new DateTime(2024, 12, 26, 12, 34, 50, 24, DateTimeKind.Local).AddTicks(3911),
                            DueDate = new DateTime(2025, 1, 9, 12, 34, 50, 24, DateTimeKind.Local).AddTicks(3927),
                            MemberId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CheckoutDate = new DateTime(2024, 12, 26, 12, 34, 50, 24, DateTimeKind.Local).AddTicks(3931),
                            DueDate = new DateTime(2025, 1, 9, 12, 34, 50, 24, DateTimeKind.Local).AddTicks(3932),
                            MemberId = 2
                        });
                });

            modelBuilder.Entity("LibrarySystem.Models.Librarian", b =>
                {
                    b.Property<int>("LibrarianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibrarianId"), 1L, 1);

                    b.Property<string>("LibrarianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibrarianId");

                    b.ToTable("Librarians");

                    b.HasData(
                        new
                        {
                            LibrarianId = 1,
                            LibrarianName = "Alice"
                        },
                        new
                        {
                            LibrarianId = 2,
                            LibrarianName = "Bob"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            MemberName = "John Doe"
                        },
                        new
                        {
                            MemberId = 2,
                            MemberName = "Jane Smith"
                        });
                });

            modelBuilder.Entity("BookLibrarian", b =>
                {
                    b.HasOne("LibrarySystem.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("ManagedBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Models.Librarian", null)
                        .WithMany()
                        .HasForeignKey("ManagersLibrarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrarySystem.Models.Book", b =>
                {
                    b.HasOne("LibrarySystem.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibrarySystem.Models.Checkout", b =>
                {
                    b.HasOne("LibrarySystem.Models.Book", "Book")
                        .WithMany("Checkouts")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Models.Member", "Member")
                        .WithMany("Checkouts")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibrarySystem.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibrarySystem.Models.Book", b =>
                {
                    b.Navigation("Checkouts");
                });

            modelBuilder.Entity("LibrarySystem.Models.Member", b =>
                {
                    b.Navigation("Checkouts");
                });
#pragma warning restore 612, 618
        }
    }
}
